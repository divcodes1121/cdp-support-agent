{
  "url": "https://docs.mparticle.com/guides/platform-guide/rules",
  "title": "Untitled",
  "content": "Home Guides Developers Integrations Changelog Documentation Developers Platform API Overview Accounts Apps Audiences Calculated Attributes Data Points Feeds Field Transformations Services Users Workspaces Data Subject Request API Version 1 and 2 Data Subject Request API Version 3 Warehouse Sync API Overview Warehouse Sync API Tutorial Warehouse Sync API Reference Data Mapping Warehouse Sync SQL Reference Warehouse Sync Troubleshooting Guide ComposeID Warehouse Sync API v2 Migration Calculated Attributes Seeding API Bulk Profile Deletion API Reference Custom Access Roles API Data Planning API Group Identity API Reference Pixel Service Profile API Events API mParticle JSON Schema Reference IDSync AMP SDK Initialization Configuration Network Security Configuration Event Tracking User Attributes IDSync Screen Events Commerce Events Location Tracking Media Kits Application State and Session Management Data Privacy Controls Error Tracking Opt Out Push Notifications WebView Integration Logger Preventing Blocked HTTP Traffic with CNAME Linting Data Plans Troubleshooting the Android SDK API Reference Upgrade to Version 5 Cordova Plugin Identity Direct URL Routing FAQ Web Android iOS Getting Started Usage API Reference Initialization Configuration Event Tracking User Attributes IDSync Screen Tracking Commerce Events Location Tracking Media Kits Application State and Session Management Data Privacy Controls Error Tracking Opt Out Push Notifications Webview Integration Upload Frequency App Extensions Preventing Blocked HTTP Traffic with CNAME Linting Data Plans Troubleshooting iOS SDK Social Networks iOS 14 Guide iOS 15 FAQ iOS 16 FAQ iOS 17 FAQ iOS 18 FAQ API Reference Upgrade to Version 7 Getting Started Identity Media Getting Started Identity Upload Frequency Getting Started Opt Out Initialize the SDK Event Tracking Commerce Tracking Error Tracking Screen Tracking Identity Location Tracking Session Management Getting Started Identity Initialization Configuration Content Security Policy Event Tracking User Attributes IDSync Page View Tracking Commerce Events Location Tracking Media Kits Application State and Session Management Data Privacy Controls Error Tracking Opt Out Custom Logger Persistence Native Web Views Self-Hosting Multiple Instances Web SDK via Google Tag Manager Preventing Blocked HTTP Traffic with CNAME Facebook Instant Articles Troubleshooting the Web SDK Browser Compatibility Linting Data Plans API Reference Upgrade to Version 2 of the SDK Getting Started Identity Web Alexa Android iOS Web mParticle Command Line Interface Linting Tools Smartype Node SDK Go SDK Python SDK Ruby SDK Java SDK Overview Step 1. Create an input Step 2. Verify your input Step 3. Set up your output Step 4. Create a connection Step 5. Verify your connection Step 6. Track events Step 7. Track user data Step 8. Create a data plan Step 9. Test your local app Step 1. Create an input Step 2. Create an output Step 3. Verify output Overview Step 1. Create an input Step 2. Verify your input Step 3. Set up your output Step 4. Create a connection Step 5. Verify your connection Step 6. Track events Step 7. Track user data Step 8. Create a data plan Step 1. Create an input Step 2. Create an output Step 3. Verify output Step 1. Create an input Step 2. Create an output Step 3. Verify output Step 1. Create an input Step 2. Create an output Step 3. Verify output Overview Step 1. Create an input Step 2. Verify your input Step 3. Set up your output Step 4. Create a connection Step 5. Verify your connection Step 6. Track events Step 7. Track user data Step 8. Create a data plan Introduction Outbound Integrations Firehose Java SDK Inbound Integrations Overview Android Kit Integration JavaScript Kit Integration iOS Kit Integration Compose ID Data Hosting Locations Glossary Migrate from Segment to mParticle Migrate from Segment to Client-side mParticle Migrate from Segment to Server-side mParticle Segment-to-mParticle Migration Reference Rules Developer Guide API Credential Management The Developer's Guided Journey to mParticle Guides Create an Input Start capturing data Connect an Event Output Create an Audience Connect an Audience Output Transform and Enhance Your Data Introduction Profiles Audiences Overview Create an Audience Connect an Audience Manage Audiences Real-time Audiences (Legacy) Standard Audiences (Legacy) Calculated Attributes Overview Using Calculated Attributes Create with AI Assistance Calculated Attributes Reference Predictive Audiences Overview Using Predictive Audiences Journeys Overview Manage Journeys Download an audience from a journey Audience A/B testing from a journey Journeys 2.0 What are predictive attributes? Create Future Prediction Use Future Predictions in Campaigns Assess and Troubleshoot Predictions Next Best Action Overview Create a Next Best Action (NBA) View and Manage NBAs Activate Next Best Actions in Campaigns Usage and Billing Report The new mParticle Experience The Overview Map Observability Overview Observability User Guide Observability Troubleshooting Examples Observability Span Glossary Introduction Data Retention Connections Activity Live Stream Data Filter Rules Tiered Events mParticle Users and Roles Analytics Free Trial Troubleshooting mParticle Usage metering for value-based pricing (VBP) Introduction Sync and Activate Analytics User Segments in mParticle User Segment Activation Welcome Page Announcements Project Settings Roles and Teammates Organization Settings Global Project Filters Portfolio Analytics Analytics Data Manager Overview Events Event Properties User Properties Revenue Mapping Export Data UTM Guide Data Dictionary Query Builder Overview Modify Filters With And/Or Clauses Query-time Sampling Query Notes Filter Where Clauses Event vs. User Properties Group By Clauses Annotations Cross-tool Compatibility Apply All for Filter Where Clauses Date Range and Time Settings Overview User Attributes at Event Time Understanding the Screen View Event Analyses Introduction Getting Started Visualization Options For Clauses Date Range and Time Settings Calculator Numerical Settings Assisted Analysis Properties Explorer Frequency in Segmentation Trends in Segmentation Did [not] Perform Clauses Cumulative vs. Non-Cumulative Analysis in Segmentation Total Count of vs. Users Who Performed Save Your Segmentation Analysis Export Results in Segmentation Explore Users from Segmentation Getting Started with Funnels Group By Settings Conversion Window Tracking Properties Date Range and Time Settings Visualization Options Interpreting a Funnel Analysis Group By Filters Conversion over Time Conversion Order Trends Funnel Direction Multi-path Funnels Analyze as Cohort from Funnel Save a Funnel Analysis Explore Users from a Funnel Export Results from a Funnel Getting Started with Cohorts Analysis Modes Save a Cohort Analysis Export Results Explore Users Saved Analyses Manage Analyses in Dashboards Getting Started Event Menu Visualization Ending Event Save a Journey Analysis Getting Started User Activity Timelines Time Settings Export Results Save A User Analysis DashboardsââGetting Started Manage Dashboards Dashboard Filters Organize Dashboards Scheduled Reports Favorites Time and Interval Settings in Dashboards Query Notes in Dashboards User Aliasing The Demo Environment Keyboard Shortcuts Analytics for Marketers Analytics for Product Managers Compare Conversion Across Acquisition Sources Analyze Product Feature Usage Identify Points of User Friction Time-based Subscription Analysis Dashboard Tips and Tricks Understand Product Stickiness Optimize User Flow with A/B Testing User Segments User Segments Export API Dashboard Filter API IDSync Overview Use Cases for IDSync Components of IDSync Store and Organize User Data Identify Users Default IDSync Configuration Profile Conversion Strategy Profile Link Strategy Profile Isolation Strategy Best Match Strategy Aliasing Overview Create and Manage Group Definitions Introduction Catalog Live Stream Data Plans Blocked Data Backfill Guide Warehouse Sync Data Privacy Controls Data Subject Requests Default Service Limits Feeds Cross-Account Audience Sharing Approved Sub-Processors Import Data with CSV Files CSV File Reference Glossary Video Index Single Sign-On (SSO) Setup Examples Debug Console Data Warehouse Delay Alerting Introduction Introduction Introduction Rudderstack Google Tag Manager Segment Advanced Data Warehouse Settings AWS Kinesis (Snowplow) AWS Redshift (Define Your Own Schema) AWS S3 Integration (Define Your Own Schema) AWS S3 (Snowplow Schema) BigQuery (Snowplow Schema) BigQuery Firebase Schema BigQuery (Define Your Own Schema) GCP BigQuery Export Snowflake (Snowplow Schema) Snowplow Schema Overview Snowflake (Define Your Own Schema) REST API Dashboard Filter API (Deprecated) User Segments Export API (Deprecated) SDKs Introduction React Native iOS Android Java JavaScript Python Object API Aliasing Rules Rules allow you to cleanse, enrich and transform your incoming and outgoing data. A rule is a script which accepts an incoming mParticle Events API âbatchâ object and modifies it according to your business logic. Some example use-cases for a rule are: Modify a batchâs data Drop a batch Modify an eventâs data Drop an event from a batch Add events to a batch Rule execution Each of your Inputs, such as for your web, mobile, or server-to-server data, has an individually configured data pipeline, and each Inputâs pipeline contains the same key stages. Rules are therefore applied for a specific Inputâs pipeline, and itâs up to you choose where in that Inputâs pipeline each Rule is executed. A single Input pipeline may contain multiple Rules each stage. mParticle pipeline stages Stage 1 - Input Data is received by mParticle for a specific Input (such as Web, iOS, or a custom server feed). Stage 2 - Storage and Processing The Inputâs data is stored and processed by mParticle, including: mParticleâs profile system, which stores user data and enriches the Inputâs data based on the existing profile of that user. mParticle Data Master tool Stage 3 - Output The Inputâs data is sent individually to the mParticle Audience system and 300+ partner integrations. In this stage the pipeline actually branches out with a single Input potentially being connected to many Outputs. Rule application Rules are applied to a specific Inputâs pipeline. There are two places in the pipeline where rules can be applied: In between Stage 1 and Stage 2 Rules executed between Stage 1 and Stage 2 affect the data sent to both Stage 2 and then Stage 3, including the mParticle profile store, audience store, and all outputs. These are labeled âAll Outputâ Rules in your mParticle dashboard. In between Stage 2 and Stage 3 You can also apply a rule right before itâs sent to a specific Output. This lets you mutate data to handle specific requirements or mappings that need to occur for a given partner integration. Rule requirements All rules accept an mParticle Events API batch object and can return a modified or null batch object. There are some differences in error handling and available fields depending on pipeline location. See Rules Developer Guide for details. A 200ms timeout applies to all rules. You can choose if a batch should be dropped or continue unprocessed by the rules in the case of a timeout. Rules are executed on the server and only act on data forwarded downstream server-to-server. A warning is shown in the dashboard if you set up one of the following rules: A rule for integrations that forwards data client-side via a kit. A rule for hybrid integrations that support forwarding via client-side and server-to-server. Rules are executed on the server and only act on data forwarded downstream server-to-server. A warning is shown in the dashboard if you set up one of the following rules: A rule for integrations that forwards data client-side via a kit. A rule for hybrid integrations that support forwarding via client-side and server-to-server. If you are using a rule to modify user identities or user attributes, you must include a âUser Identity Change Eventâ (user_identity_change) or a âUser Attribute Change Eventâ (user_attribute_change). See Rules Developer Guide for an example of user_attribute_change in a rule. Create a function in AWS mParticle rules are hosted in your AWS account as Lambda functions. To do this, you need to be able to provide an Amazon Resource Number (ARN) for your rule. See the AWS Lambda documentation for help creating a function. The Lambda functions used for rules must be hosted in the same AWS region as your mParticle account. The name of the function must begin with âmprâ Your development rule must have an alias of â$LATESTâ Your production rule must have an alias of âPRODâ Your ARNs should look something like this: arn:aws:lambda:us-east-1:999999999999:function:mprmylambdafunction:PROD arn:aws:lambda:us-east-1:999999999999:function:mprmylambdafunction:$LATEST IAM user To connect to your AWS Lambda function, you must provide the AWS Access Key ID and Secret Access Key for an IAM user. In the IAM dashboard, add the following permissions policy for the user: IAM role You will also need to create a role in IAM. Assign this role the same policy document created above. Assign this role to each Lambda function you plan to deploy as an mParticle rule. Creating a rule in the dashboard Create a rule by navigating to Data Master > Rules Click New Rule. Enter your Development and Production ARNs and click Test. Error handling When you first test a rule, you must select a Failure Action. This determines what happens if your rule throws an unhandled exception. There is no default action, you must select one of the following: If you choose Discard, an unhandled exception causes your rule return null, effectively dropping the batch. If you choose Proceed, an unhandled exception causes your rule to return the unaltered batch object, proceeding as if the rule had not been applied. Regardless of which option you choose, itâs best practice to handle all exceptions in your code, rather than falling back on the above defaults. This is especially true if your rule deals with events, where an unhandled exception from just one event could lead to all events in the batch being dropped. Javascript syntax Your code must be a valid Lambda function. batch is the complete incoming batch object. context is a required argument for Lambda functions, but is effectively null for mParticle rules. Testing rules The first time you test a rule, you are asked to provide a name, description and failure action. After naming a rule, you can test it by using one of the sample templates provided in the Test rule dialog. You can also copy and paste batch JSON from your Live Stream. If you do this, be sure to pick a full batch to copy, not a single event. Click Test to run. Optionally, check a box to save your JSON template in local storage for future testing. You must enter valid batch JSON in the code editor. If there are any syntactical errors in your code, warning or error icons will display next to the line number with details of the problem so you can correct. After clicking Test, you can examine the JSON output from your function to see that the input has been modified as expected. After a successful test you can click Save to save the Rule. Due to recent updates in AWS Lambda, it may be necessary to wait one minute after a successful test in order to save the Rule. If your test fails, try examining the logs for any console output. Versioning When you first create a rule, by default it will only be applied to DEV data. As well as testing a rule with sample JSON you should test the rule in your dev environment to make sure data reaching your output services is as expected. When you are ready to apply a rule to your production data, click Promote to Prod on the rule page. This will create a âv1â production rule. Note that before a rule can be promoted to Prod, you must remove all console.log() statements. If you need to make changes, choose $LATEST from the Version dropdown. All other versions are read only. Test your changes with your dev environment and, when you are ready, click Promote to Prod to create âv2â of your production rule. Note that you can have a maximum of 50 versions per rule. If you have too many versions, select a version and click the trash can icon to the right of the version number to delete it. Status Each rule has a master switch in the Settings panel. If there is a problem with your rule, you can switch it off and it will be disabled for all connections until you enable it again. To disable, click Edit in the right sidebar and set the Status slider to inactive. Metrics The following metrics are available: Invocations - how many times the rule was invoked Throttles - how many times a 429 throttling response was returned when calling the rule Errors - how many errors have occurred when calling the rule These metrics are for the last 24 hours and apply to all connections. Summaries for each rule can be seen on the main rules page. Detailed graph of the previous 24 hours is available on the Monitoring tab of the individual rule page. Logs To help you with troubleshooting rules, mParticle maintains logs for each rule where you can view all console output. From an individual rule page, select the Logs tab. You can filter messages by date range or search for keywords. Deleting rules From the rules listing, select the Delete action to delete the rule. If the rule is applied to any connections, it will be removed from those connections. Was this page helpful?",
  "headings": [
    {
      "level": 4,
      "text": "Documentation"
    },
    {
      "level": 2,
      "text": "Developers"
    },
    {
      "level": 2,
      "text": "Guides"
    },
    {
      "level": 1,
      "text": "Rules"
    },
    {
      "level": 2,
      "text": "Rule execution"
    },
    {
      "level": 3,
      "text": "mParticle pipeline stages"
    },
    {
      "level": 3,
      "text": "Rule application"
    },
    {
      "level": 2,
      "text": "Rule requirements"
    },
    {
      "level": 2,
      "text": "Create a function in AWS"
    },
    {
      "level": 3,
      "text": "IAM user"
    },
    {
      "level": 3,
      "text": "IAM role"
    },
    {
      "level": 2,
      "text": "Creating a rule in the dashboard"
    },
    {
      "level": 2,
      "text": "Error handling"
    },
    {
      "level": 2,
      "text": "Javascript syntax"
    },
    {
      "level": 2,
      "text": "Testing rules"
    },
    {
      "level": 2,
      "text": "Versioning"
    },
    {
      "level": 2,
      "text": "Status"
    },
    {
      "level": 2,
      "text": "Metrics"
    },
    {
      "level": 2,
      "text": "Logs"
    },
    {
      "level": 2,
      "text": "Deleting rules"
    }
  ],
  "platform": "mparticle"
}